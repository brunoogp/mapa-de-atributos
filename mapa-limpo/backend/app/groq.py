# app/groq.py
import os
import json
import re
from openai import OpenAI
from dotenv import load_dotenv
import openai
from app.vectorstore.loader_arquetipos import load_vectorstore
from langchain.chains import RetrievalQA
from langchain.chains.question_answering import load_qa_chain
from langchain_core.prompts import PromptTemplate
from langchain_groq import ChatGroq

load_dotenv()

# Cliente Groq direto
client = OpenAI(
    api_key=os.getenv("GROQ_API_KEY"),
    base_url="https://api.groq.com/openai/v1"
)

PROMPT_TEMPLATE = """
Voc√™ √© um estrategista de marcas e deve gerar um diagn√≥stico em formato JSON **v√°lido e parse√°vel** com base no briefing e no conte√∫do te√≥rico a seguir. 

‚ö†Ô∏è IMPORTANTE:
- N√ÉO adicione nenhum coment√°rio fora do JSON.
- N√ÉO explique o que est√° fazendo.
- N√ÉO use aspas desnecess√°rias, bullets ou pontua√ß√µes extras.
- Use apenas os atributos fornecidos.
- Para os exemplos de marcas e arqu√©tipos use apenas presentes nesse conte√∫do de refer√™ncia** as informa√ß√µes do banco vetorial.
- Retorne APENAS um JSON v√°lido com a estrutura exata abaixo.

üìö Conte√∫do de Refer√™ncia (extra√≠do do banco vetorial):
{pdf_contexto}

‚ö†Ô∏è Utilize **apenas os arqu√©tipos presentes nesse conte√∫do de refer√™ncia**. N√£o adicione novos arqu√©tipos, mesmo que pare√ßam fazer sentido. Respeite rigorosamente a lista e os detalhes dos PDFs.

üìÑ Briefing:
Nome da marca: {nome_marca}
Descri√ß√£o: {descricao}
Atributos selecionados (use SOMENTE os atributos da lista abaixo): {atributos}
Demais informa√ß√µes relevantes:
{detalhes_extra}

üìå FORMATO EXATO DO JSON ESPERADO:
‚ö†Ô∏è Ao gerar a descri√ß√£o do arqu√©tipo e as diretrizes visual, verbal e simb√≥lica, utilize apenas o conte√∫do do banco vetorial correspondente ao arqu√©tipo escolhido. N√ÉO invente, N√ÉO resuma de cabe√ßa, N√ÉO use exemplos fora do que foi recuperado.

{{
  "resumo": "fa√ßa um resumo detalhado da empresa levando em considera√ß√£o o contexto e os dados fornecidos na etapa 2 de briefing",
  "atributos": [{{"atributo": "Nome do Atributo", "valor": 0-10}}, ...],
  "arquetipo": {{
    "nome": "...",
    "descricao": "descreva sempre o arqu√©tipo de forma objetiva e com bastnate detalhe, nunca fuja do contexto do arqu√©tipo, se mantenha fiel as caracter√≠sticas dele de acordo com as informa√ß√µes do banco vetorial",
    "exemplos": ["...", "..."]
  }},
  "grafico_arquetipos": [{{"nome": "...", "valor": 0-100}}, ...],
 "diretrizes": {{
  "visual": "Com base nas refer√™ncias visuais do arqu√©tipo selecionado e considerando o contexto da empresa, descreva como a marca deve se manifestar visualmente. Inclua sugest√µes de estilo de identidade visual (formas, cores, tipografia), dire√ß√£o de arte, ambienta√ß√µes e sensa√ß√µes visuais que comuniquem o arqu√©tipo de forma estrat√©gica. Aponte tamb√©m o que evitar visualmente para n√£o descaracterizar a ess√™ncia arquet√≠pica.",
  "verbal": "Com base na linguagem e estilo comunicacional do arqu√©tipo identificado, descreva como a marca deve se comunicar verbalmente com seu p√∫blico. Indique o tom de voz ideal, estruturas de frases, vocabul√°rio preferencial, al√©m de exemplos pr√°ticos de como a marca pode se apresentar em textos institucionais, redes sociais ou campanhas. Adapte essas diretrizes √† realidade da empresa e do setor.",
  "simbolico": "A partir do arqu√©tipo dominante, recomende met√°foras, narrativas simb√≥licas, √≠cones, elementos culturais e constru√ß√µes simb√≥licas que podem ser incorporadas na comunica√ß√£o e identidade da marca. Traga sugest√µes de storytelling, personagens, analogias ou s√≠mbolos que fortale√ßam o v√≠nculo emocional com o p√∫blico, de acordo com o contexto e posicionamento da marca."
}},

  "insights": [
  "Para cada atributo selecionado, gere um insight estrat√©gico √∫nico e espec√≠fico.",
  "A pontua√ß√£o atribu√≠da (0 a 10) indica a intensidade com que esse atributo precisa estar presente na comunica√ß√£o para refor√ßar o arqu√©tipo dominante.",
  "Evite frases gen√©ricas e repetitivas como 'isso se conecta com...'. Use narrativas simb√≥licas, met√°foras e tens√£o arquet√≠pica.",
  "Inclua uma an√°lise simb√≥lica ou comportamental ‚Äî como esse atributo contribui (ou n√£o) para o impacto emocional da marca.",
  "Varie a linguagem de introdu√ß√£o e justificativa a cada insight. Explore constru√ß√µes como: 'Mais do que um atributo...', 'Funciona como um catalisador simb√≥lico...', 'Traduz a inten√ß√£o criativa da marca...', '√â um gesto de...'.",
  "Use met√°foras visuais, sensoriais ou arquet√≠picas sempre que poss√≠vel. Exemplo: 'Ser vision√°rio √© como abrir um novo caminho no nevoeiro da mesmice'.",
  "Sempre que pertinente, adicione uma tens√£o ou contraponto simb√≥lico. Exemplo: 'Apesar de poderoso, esse atributo precisa ser dosado com clareza para n√£o se tornar abstrato demais.'",
  "Sempre indique a pontua√ß√£o atribu√≠da (0 a 10) no final de cada insight, mesmo que o texto seja simb√≥lico ou metaf√≥rico.",
  "Garanta que todos os atributos selecionados estejam presentes na resposta, sem omiss√µes.",
  "Finalize a se√ß√£o de insights com um par√°grafo de s√≠ntese estrat√©gica conectando os atributos ao arqu√©tipo identificado, explicando como essa combina√ß√£o refor√ßa o posicionamento da marca.",
  "Exemplo de insight completo: 'Para um Criador, a agilidade n√£o √© apenas operacional ‚Äî ela representa a liberdade criativa de testar, errar e evoluir r√°pido. Por isso, atribu√≠mos 9/10 para esse atributo. Esse ritmo n√£o s√≥ acelera processos, mas refor√ßa a identidade de uma marca que n√£o tem medo de transformar ideias em a√ß√£o. Ainda assim, vale equilibrar esse impulso com consist√™ncia visual para manter clareza na entrega.'"
]


}}
"""

prompt_langchain = PromptTemplate(
    input_variables=["pdf_contexto", "nome_marca", "descricao", "atributos", "detalhes_extra"],
    template=PROMPT_TEMPLATE
)

def buscar_contexto_vetorial(contexto_briefing: dict):
    try:
        db = load_vectorstore()
        retriever = db.as_retriever(search_kwargs={"k": 8})
        query = f"{contexto_briefing['nome_marca']} - {contexto_briefing['descricao']}"
        llm = ChatGroq(model="llama3-70b-8192", api_key=os.getenv("GROQ_API_KEY"))
        qa_chain = load_qa_chain(llm=llm, chain_type="stuff")
        qa = RetrievalQA(retriever=retriever, combine_documents_chain=qa_chain, return_source_documents=True)
        resultado = qa.invoke({"query": query})
        docs_text = "\n\n".join([doc.page_content for doc in resultado["source_documents"]])
        print("‚úÖ Contexto vetorial recuperado com sucesso")
        return docs_text
    except Exception as e:
        print(f"‚ùå Erro ao buscar contexto vetorial: {str(e)}")
        return "Erro ao carregar o contexto de refer√™ncia."

def extrair_json(texto: str) -> dict:
    try:
        match = re.search(r"\{.*\}", texto, re.DOTALL)
        if match:
            json_str = match.group()
            return json.loads(json_str)
        return json.loads(texto)
    except json.JSONDecodeError:
        texto_limpo = re.sub(r'^[^{]*', '', texto)
        texto_limpo = re.sub(r'[^}]*$', '', texto_limpo)
        try:
            return json.loads(texto_limpo)
        except json.JSONDecodeError as e:
            raise ValueError(f"‚ùå N√£o foi poss√≠vel extrair um JSON v√°lido. Erro: {str(e)}")

def iniciar_processamento(nome_marca, descricao, atributos, detalhes):
    try:
        print(f"üîç Iniciando processamento para marca: {nome_marca}")
        detalhes_extra = "\n".join([f"{k}: {v}" for k, v in detalhes.items() if k not in ["nome_marca", "descricao_marca", "atributos_selecionados"]])
        contexto_briefing = {
            "query": f"{nome_marca} - {descricao}",
            "nome_marca": nome_marca,
            "descricao": descricao,
            "atributos": ", ".join(atributos),
            "detalhes_extra": detalhes_extra
        }

        print("üîç Buscando contexto relevante na base de conhecimento...")
        pdf_contexto = buscar_contexto_vetorial(contexto_briefing)
        print(f"üìÑ Contexto vetorial:\n{pdf_contexto[:800]}...\n")

        print("üß† Gerando diagn√≥stico estrat√©gico com base no contexto encontrado...")
        resultado = gerar_diagnostico_com_llm(nome_marca, descricao, atributos, detalhes_extra, pdf_contexto)

        print("‚úÖ Processamento completo")
        return resultado

    except Exception as e:
        print(f"‚ùå Erro no processamento: {str(e)}")
        raise e

import time

def gerar_diagnostico_com_llm(nome_marca, descricao, atributos, detalhes_extra, pdf_contexto):
    try:
        prompt_final = PROMPT_TEMPLATE.format(
            nome_marca=nome_marca,
            descricao=descricao,
            atributos=", ".join(atributos) if isinstance(atributos, list) else atributos,
            detalhes_extra=detalhes_extra,
            pdf_contexto=pdf_contexto
        )

        tentativas = 0
        while tentativas < 3:
            try:
                response = client.chat.completions.create(
                    model="llama3-70b-8192",
                    messages=[
                        {"role": "system", "content": "Voc√™ √© um estrategista de marcas especializado em arqu√©tipos de marca."},
                        {"role": "user", "content": prompt_final},
                    ],
                    temperature=0.4,
                    max_tokens=4096,
                )

                content = response.choices[0].message.content
                print(f"‚úÖ Resposta recebida do LLM")
                return extrair_json(content)

            except openai.RateLimitError as e:
                print("‚ö†Ô∏è Limite de tokens atingido. Aguardando 65 segundos para tentar novamente...")
                time.sleep(65)
                tentativas += 1

        raise RuntimeError("‚ùå Limite de requisi√ß√µes excedido ap√≥s v√°rias tentativas.")

    except json.JSONDecodeError as e:
        print(f"‚ùå Erro ao decodificar JSON: {str(e)}")
        raise
    except Exception as e:
        print(f"‚ùå Erro ao gerar diagn√≥stico: {str(e)}")
        raise


        content = response.choices[0].message.content
        print(f"‚úÖ Resposta recebida do LLM")
        return extrair_json(content)

    except json.JSONDecodeError as e:
        print(f"‚ùå Erro ao decodificar JSON: {str(e)}")
        raise
    except Exception as e:
        print(f"‚ùå Erro ao gerar diagn√≥stico: {str(e)}")
        raise

def gerar_diagnostico_com_groq(nome_marca, descricao, atributos, detalhes, pdf_texts=None):
    print("‚ö†Ô∏è Usando fun√ß√£o legada. Considere usar iniciar_processamento() diretamente.")
    return iniciar_processamento(nome_marca, descricao, atributos, detalhes)
